#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 20
#define COLS 40

void initializeGrid(int grid[ROWS][COLS]) {
    srand(time(NULL));
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            grid[i][j] = rand() % 2;
        }
    }
}

void printGrid(int grid[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf(grid[i][j] ? "O" : ".");
        }
        printf("\n");
    }
}

int countNeighbors(int grid[ROWS][COLS], int x, int y) {
    int count = 0;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            if (i == 0 && j == 0) continue;
            int ni = x + i;
            int nj = y + j;
            if (ni >= 0 && ni < ROWS && nj >= 0 && nj < COLS) {
                count += grid[ni][nj];
            }
        }
    }
    return count;
}

void updateGrid(int grid[ROWS][COLS], int newGrid[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            int neighbors = countNeighbors(grid, i, j);
            if (grid[i][j] == 1) {
                if (neighbors < 2 || neighbors > 3) {
                    newGrid[i][j] = 0; 
                } else {
                    newGrid[i][j] = 1; 
                }
            } else {
                if (neighbors == 3) {
                    newGrid[i][j] = 1; 
                } else {
                    newGrid[i][j] = 0; 
                }
            }
        }
    }
}

void copyGrid(int grid[ROWS][COLS], int newGrid[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            grid[i][j] = newGrid[i][j];
        }
    }
}

int main() {
    int grid[ROWS][COLS];
    int newGrid[ROWS][COLS];

    initializeGrid(grid);

    while (1) {
        printGrid(grid);
        updateGrid(grid, newGrid);
        copyGrid(grid, newGrid);
        printf("\n");
        usleep(200000);
        system("clear");
    }

    return 0;
}
